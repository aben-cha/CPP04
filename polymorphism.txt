======================Polymorphism=========================
* Polymorphism : decribes the ability of an object to have
  multiple forms, that means we can have two or more objects
  that inherit from the same base class those objects can have  
  the method that has the same name but different implementation
  meaning different behavior
* means many forms and it occurs when we have many classes that
  are related to each other by inheritance. 

* the Polymorphism requires references or pointers
 if we didn't pass by reference then we're going to go back
 to using static binding even though this is virtual

* the Polymorphism allow to reduce the amount of duplicated code
  in our programme 

* there are two types of Polymorphism : 
  1 - compilation time Polymorphism : statis binding
      a - function overloading
      b - operator overloading
  2 - Runctime Polymorphism : dynamic binding
    a - function overriding (using virtual functions)
========================( Virtual Member Functions)======================
* binding == liasons
  ==> associating the call of a function with the definition of that function
* virtual = 
  1 - dynamic binding = overriding ==> happen during the runtime
  2 - static binding = overloading = redefining  ==> happening during the compile time 
      ==> happens by default 
======> How Dynamic Binding Works in C++
* you must declare a function as virtual in the bse class
* A base class pointer or reference nust be used to call the function
* Ar runtime c++ determines the actual object type (derived class) and  
  calls the appropriate overrideen function.

=======================(Virtual Destructors)========================
* the Destructors virtual to make sure that it's called when we're
  using inheritance based Polymorphism or in other words when we're
  creating a base pointer and instantiating it as some other derived 
  class type
* Where to use a virtual destructor:
  => Polymorphism: When you use inheritance and delete objects through base 
  class pointers, always declare the base class destructor as virtual.
  => If a class is not intended to be used as a base class or doesn’t have 
  any virtual functions, there’s no need for a virtual destructor.
* Virtual destructors ensure proper cleanup when deleting derived objects 
  through base class pointers.
=========================(Understanding the vtable)=================
* anytime we use the vitual keyword a virtual table is being created 
* when we call a member function, the vtbl points us to the 
  correct member function